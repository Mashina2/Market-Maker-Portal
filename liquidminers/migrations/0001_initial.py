# Generated by Django 3.2.9 on 2021-11-29 19:37

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eid', models.CharField(default=1, max_length=16, verbose_name='ID on Exchange')),
                ('symbol', models.CharField(max_length=16, verbose_name='Symbol')),
                ('name', models.CharField(max_length=32, verbose_name='Name')),
                ('icon', models.CharField(default='none', max_length=16, null=True, verbose_name='Icon')),
                ('exchange', models.CharField(max_length=16, null=True, verbose_name='Exchange Name')),
            ],
        ),
        migrations.CreateModel(
            name='Investment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('minimum_spread', models.FloatField(default=0)),
                ('maximum_spread', models.FloatField(default=0)),
                ('wallet_address', models.TextField(default=0)),
                ('coin_amount', models.FloatField(default=0)),
                ('fiat_amount', models.FloatField(default=0, null=True)),
                ('safety_net', models.BooleanField(default=False, null=True)),
                ('total_value', models.FloatField(null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Pair',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eid', models.CharField(default=1, max_length=16, verbose_name='ID on Exchange')),
                ('name', models.CharField(default='<PAIR>', max_length=32, verbose_name='Name')),
                ('exchange', models.CharField(max_length=16, null=True, verbose_name='Exchange Name')),
                ('buy_side', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='buy_side', to='liquidminers.currency', verbose_name='Buy Side')),
                ('sell_side', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='sell_side', to='liquidminers.currency', verbose_name='Sell Side')),
            ],
        ),
        migrations.CreateModel(
            name='Status',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, unique=True, verbose_name='Name')),
                ('style', models.CharField(max_length=64, null=True, verbose_name='Style')),
            ],
        ),
        migrations.CreateModel(
            name='Week',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('wid', models.IntegerField(default=0, unique=True, verbose_name='Week ID')),
                ('start', models.DateTimeField(null=True, verbose_name='Beginning of Week')),
                ('end', models.DateTimeField(null=True, verbose_name='End of Week')),
            ],
        ),
        migrations.CreateModel(
            name='WeeklyReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('week', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.week')),
            ],
        ),
        migrations.CreateModel(
            name='Pool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32, null=True)),
                ('amount', models.FloatField(null=True)),
                ('start_date', models.DateField(default=datetime.date.today)),
                ('end_date', models.DateField(default=datetime.date.today)),
                ('exchange', models.CharField(default='monetum', max_length=32, null=True)),
                ('campaign_detail', models.TextField(max_length=150, null=True)),
                ('rules', models.TextField(max_length=50, null=True)),
                ('reward_detail', models.TextField(max_length=50, null=True)),
                ('campaign_duration', models.IntegerField(null=True)),
                ('currency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.currency')),
                ('pair', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.pair')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.status')),
                ('weekly_amount', models.ManyToManyField(to='liquidminers.WeeklyReward')),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('eid', models.CharField(default=1, max_length=32)),
                ('amount', models.FloatField(null=True)),
                ('price', models.FloatField(null=True)),
                ('side', models.CharField(default='BUY', max_length=9, null=True)),
                ('worth', models.FloatField()),
                ('trigger_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True, null=True)),
                ('investment', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.investment')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.status')),
            ],
        ),
        migrations.CreateModel(
            name='InvestmentShift',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('run', models.DateTimeField()),
                ('stop', models.DateTimeField()),
                ('worth_at_run', models.IntegerField()),
                ('worth_at_end', models.IntegerField()),
                ('duration', models.IntegerField()),
                ('investment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='liquidminers.investment', verbose_name='ID on Exchange')),
                ('week', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='liquidminers.week', verbose_name='Week')),
            ],
        ),
        migrations.AddField(
            model_name='investment',
            name='pool',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.pool'),
        ),
        migrations.AddField(
            model_name='investment',
            name='shift',
            field=models.ManyToManyField(related_name='shift', to='liquidminers.InvestmentShift'),
        ),
        migrations.AddField(
            model_name='investment',
            name='status',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='liquidminers.status'),
        ),
        migrations.AddField(
            model_name='investment',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Exchange',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='<PAIR>', max_length=32, verbose_name='Name')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='liquidminers.status', verbose_name='Status')),
            ],
        ),
        migrations.CreateModel(
            name='Credential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exchange', models.CharField(max_length=32)),
                ('public_key', models.TextField()),
                ('private_key', models.TextField()),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
